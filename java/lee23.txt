자동 타입 변환 - 작은 자료형 ==> 큰 자료형
강제 타입 변환 - 큰 자료형 ==> 작은 자료형
byte(1) < short(2), char < int(4) < long(8) < float(4) < double(8)


객체란 물리적으로 존재하거나 개념적인 것 중에서 다른것과 식별 가능
객체는 속성과 동작으로 구성. 자바는 이러한 속성과 동작을 각각 필드와 메소드

객체를 생성하려면 클래스가 선언되어야함

클래스명은 첫문자 대문자 캐멀스타일 첫 문자는 숫자 안된다

**패키지 컴파일**
javac -d . B.java
javac -d . C.java
javac -d . aaa.java

**실행**
java 패키지명.클래스명

--public : 제한 범위
--protected : 같은 패키지거나 자식객체만 사용가능
--default : 아무것도 안쓴것 , 같은 패키지에서 접근 가능
--private : 클래스 내부에서만 접근 가능


*상속*

부모 클래스의 필드와 메소드를 쓸수있다 private 제외

생성자는 호출할때 super(매개변수) 필요하고 기본 생성자일시 생략가능하다

	부모는 자식꺼를 맘대로 사용 불가


부모가 큰 자료형으로 보고 자식을 작은 자료형으로 봄

클래스명 객체명 = new 클래스생성자();

부모 클래스는 원래 자식 클래스에 있는 것을 사용할 수 없지만 타입 변환해서 사용할수있다

자동 타입 변환 ==> 자식 클래스에서 오버라이딩 한 것을 사용가능
Child child =new Child()
parent parent = child;

강제 형 변환 ==> 자식 클래스의 추가한 및 추가한 메소드 사용
Parent parnet = new Child();
Child child = (Child)parnet;
자동 타입변환을 하고 나서 가능


**예외(Exception)**
일반(컴파일체크)예외
 -예외 처리 코드 없으면 컴파일 오류 발생
ClassNotFoundException
실행 예외
 -예외 처리 코드 생략해도 컴파일 됨
NullPointerException
RuntimeException
NumberFormatException 숫자가 아닌 자료형을 숫자형으로 변환할때
ArrayindexOutOfBoundException 배열에서 인덱스 범위를 넘어간 경우

ClasscastException 자동 형 변환없이 강제 형 변환할 경우 예외발생 
//부모객체 instance of 자식타입 : true, false
if(pp2 instanceof B) {
	B b2 = (B)pp2;
	b2.aaa();
}


String str = args[0];
//ArrayIndexOutOfBoundsException:

int aa = Integer.parseInt(str);
//NumberFormatException


자바 API 도큐먼트
java.lang 패키지

object 최상위 클래스

equals() 메소드


*포장클래스*
첫 글짜는 대문자 char랑 int만 Character, Integer


**제네릭**

-데이터의 타입을 일반화하고 사용 시에 구체화
-클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일시에 미리 지정

클래스 선언하고 자료형 선언을 안함 타입변환이 안됨

1.클래스선언
class 클래스명<타입파라미터>

**컬렉션프레임워크**

컬렉션 : 사전적 의미로 요소(객체)를 수집해 저장하는 것

배열의 문제점
 - 저장할수 있는 객체 수가 배열 생성할때 결정
 - 삭제했을때 해당 인덱스가 비게 됨

list 컬렉션
 특징 : 인덱스로 관리 , 중복해서 객체 저장 가능
 구현  클래스: ArrayList,Vector,LinkedList


ResuiltSet 객체

ArrayList<userTbl> = ResuiltSet

**List 컬렉션**
List<E> 객체명=new ArrayList<E>();
add 추가
set 교체
get 리턴
size 객체수 리턴


**set 컬렉션**
set<E>  객체명= new HashSet<E>();
add(E e)
Iterator<E> iterator(); 반복

**map**
Map<K,V> 객체 = new HashMap<K,V>();
k는 중복 불가
put 추가

***jsp***

<%@ %> jsp디렉티브
<%@ page 속성= 값 %> 
<%@ include="" %>

<%! %> 전역 변수 및 전역 메소드 선언

<%= %> 표현문 : 출력

input.jsp : 사용자가 정보를 입력하는 페이지
inpuit_ok.jsp : 사용자가 입력한 정보를 request 객체로 전달받아서 필요한 기능을 처리


*request 객체*
 - request.setCharacterEncoding("UTF-8"):post로 받은 정보 인코딩
 - request.getParameter	     : String 으로 리턴
 - request.getParameterValues   : String 배열로 리턴


*response 객체*
 - response.sendRedirect("이동할 페이지명");
1)아이디와 비밀번호 입력 - login.jsp
2)아이디와 비밀번호가 일치하는 지 검사 -login_ok.jsp


*out 객체*


**include**
<%@ include file="파일명"%>
하나의 파일로 컴파일 해서 변수 메소드 공유 가능

[액션 태그]

1. include : 각각의 파일을 컴파일 : 변수 메소드 공유 불가
<jsp:include page="파일명">
다른 액션 태그들
</jsp:include>

상단 - top02.jsp
메인 - main02.jsp
하단 - bottom02.jsp

<jsp:include page="파일명" />

2. forward : 페이지 이동
<jsp:forward page="파일명"> </jsp:forward>

<jsp:forward page="파일명" />

main02.jsp에서 mypage.jsp로 이동

3.param : 값 전송
-- 페이지 이동이나 include시 값 전송
-- 단독으로 사용 불가
<jsp:include page="파일명">
<jsp:param name="" value="">
</jsp:include>

4 useBean
<jsp:useBean id="std" class="lee1.Hello12" scope="page"/>

--page : 그 페이지에서만 객체 유효
--request : 객체 생성 후 request 객체에 저장

<데이터 베이스 연동>
<%@page import="java.sql.DriverManager"%> 	: 자료파일을 연동하기 위해    
<%@page import="java.sql.SQLException"%>  	: 예외클래스 
<%@page import="java.sql.Statement"%>		: 
<%@page import="java.sql.PreparedStatement"%>   : 
<%@page import="java.sql.ResultSet"%>		: 저장될 위치
<%@page import="java.sql.Connection"%>		: 데이터베이스에 접속하기 위한 클래스

--순서

1. JDBC 드라이버로딩
2. 데이터베이스접속을 위한 Connection 객체 생성
3. 쿼리문을 실행하기 위한 Statement/PreparedStatement 객체 생성
4. 쿼리실행
5. 쿼리실행의 결과값(int , resultSet)사용
6. 사용된객체(ResultSet, Statement/PreparedStatement/, Connection) 종료


Statement stmt=null
String sql =" select * from userTbl; ";
stmt = conn.createStatement;

stmt.executeQuery(sql); ==>select
stmt.executeUpdate(sql); ==>나머지

ResultSet rs =null;
re = stmt.executeQuery

1) 사용자가 데이터를 입력
2) bean 객체에 set
3) bean 객체를 get 해서 insert

리턴 int 매개변수 bean 
bean 클래스 -- db 테이블의 컬럼에 해당하는 필드를 구성 set,get
DTO : 테이블의 컬럼과 동일한 데이터 클래스

List<UserBean> list = new ArrayList<UserBean>();

while(){
	UserBean ubean = new UserBean();
		
	list.add(ubean)
}

"select * from userTbl where userid='id' and name='name'"
rs 에 저장 
if(rs.next()) ==> 로그인 성공
전체 필드 화면에 출력
else == 로그인 실패 로그인 페이지로 이동

DTO : 테이블의 컬럼과 동일한 데이터 클래스
DAO : DB의 데이터 CRUD를 처리하는 클래스

1. insert를 dao로 전환
-- 리턴 :int (insert한 결과 갯수)
-- 매개 변수 : UserBean 객체
-- 메소드명 : insertUser

2. select를 dao로 전환
-- 리턴 : List<UserBean 객체>
-- 메소드명 : selectUser()

3. select  레코드갯수반환
--리턴 : int(select 레코드 수)
--매개변수 : search
--메소드명 : getSelectCount()

4. 회원 1명 정보 불러오기
--리턴 : UserBean 객체
--매개변수 : String id
--메소드명 : infoUser

5.회원정보 수정
--리턴 : 수정된 갯수int
--매개변수 : UserBean 객체
--메소드명 : updateUser

6. 회원정보 삭제
--리턴 :  삭제된 레코드 갯수
--매개변수 : String id

MVC의 개요
Model, View, Controller의 약자로 웹 애플리케이션을 비즈니스 로직, 프레젠테이션로직, 데이터로 분리하는 디자인 패턴

7. 회원 정보 일괄 
--리턴 :  삭제된 레코드 갯수 
--매개변수 : String[] id

8. 일괄 수정 (주소를 수정)
--리턴 : 정상적으로 수정된 레코드 수
--매개변수 : String[] id , String addr

1,쿠키 생성
Cookie 쿠키객체 = new Cookie("쿠키이름","데이터");
response.addCookie(쿠키객체);

2)쿠키 정보
모든 쿠키를 배열로 받아오기
Cookie[] cookies = request.getCookies();

쿠키 생성 시 만료시간 부여 

쿠키객체.setMaxAge(0);
response.addCookie(쿠키 변수);


로그인
--리턴 : id(일치한 사용자) 아니면 null
--매개변수 : userid, name
리턴 받은 id을 이용해서 쿠키 생성

나의 정보 확인
쿠키를 이용해서(id) 정보확인

1. 세션 생성

session.setAttribute("세션이름","값");
시간 설정 session.setMaxInactiveInterval(초)

유효시간 초기값 : 1800초

2. 확인

session.getAttribute("세션이름")

시간확인 session.getMaxInactiveInterval()

3. 삭제

sessio.invalidate()

--세션 값이 존재할 경우 name 님 환영합니다
--존재하지 않을 경우 login.jsp

클라이언트IP = <%= request.getRemoteAddr() %> <br />
요청정보 프로토콜 = <%= request.getProtocol() %> <br />
요청정보 전송방식 = <%= request.getMethod() %> <br />
요청 URI = <%= request.getRequestURI() %> <br />
컨텍스트 경로 = <%= request.getContextPath() %> <br /> //프로젝트파일명
서버이름 = <%= request.getServerName() %> <br />
서버포트 = <%= request.getServerPort() %> <br />

localhost:8096 ==> 현재 서버에서 직접 접속 localhost ==> 127.0.0.1
ip:8096/lee/login.jsp

<img src="<%= request.getContextPath() %>/파일명">






