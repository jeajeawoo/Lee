
mysql - RDBMS(관계형 데이터 관리 시스템)
서버시스템

SQL : Structured Query Language

##RDBMS의 무결성 - 정형 데이터

1)개체 무결성 : 기본키는 NULL 불허하고 중복이 안된다.
2)참조 무결성 : 기본키의 값이 변경되면 참조하고 있는 테이블의 외래키도 변경
3)도메인 무결성: 데이터 타입에 맞는 데이터 등록

데이터의 무결성을 지키기 위해 제한된 조건
특정한 데이터 입력 시 제약 조건을 만족해야만 입력

NoSql (not only sql) - 비정형 데이터

--객체, 도큐먼트
--구조가 없음

DML (Data Manipulation Language)
데이터 조작 언어
데이터를 조작(조회, 삽입, 수정, 삭제)하는데 사용되는 언어
	   CRUD 크루드

DML 구문이 사용되는 대상은 테이블의 행
DML 사용하기 위해서는 꼭 그 이전에 테이블이 정의되어 있어야함
SQL문 중 SELECT, INSERT, UPDATA, DELETE가 이 구문에 해당

테이블: 데이터가 저장되는 가장 기본단위

기본키: 레코드를 구분하는 컬럼

외래키: 관계를 맺고 있는 기본 테이블의 정보를 조회하기 위한 컬럼

DDL(Data Definition Language)
데이터 정의 언어
데이터베이스, 테이블, 뷰등의 데이터베이스 개체를 생성/삭제/변경하는 역할
CREATE, DROP, ALTER구문 , TRUNCATE

여러개 테이블 < 데이터베이스 < mysql

slqDB : 테이블 4개


#DCL (Data Control Language)
데이터 제어 언어
사용자에게 어떤 권한을 부여하거나 빼앗을 때 주로 사용하는 구문


show create table 테이블명 -- 테이블생성할때 쓴 쿼리문 확인

기본키 추가 삭제
alter table 테이블명 drop primary key -삭제
alter table 테이블명 change 컬럼명 primary key;

NULL : 값이 없다, 정해져있지않다
"",0 : 공백

true  : 값이 있거나 1
false : 값이 정해져있지 않은것, 0

foreign key 외래키

foreign key (칼럼명) references 테이블명(칼럼명)

기본키, 외래키 조건 확인하기
select * from information_schema.table_constraints where table_name="buyTbl" 

**on update cascade
**on delete cascade

alter table buyTbl add constraint FK_prodTbl_buyTbl
foreign key (prodName)
references prodTbl(prodName)
on update cascade
on delete cascade;


UNIQUE
'중복되지 않는 유일한 값'을 입력해야하는 조건
기본키와 차이점은 NULL 값을 허용하고 NULL값은 여러 개가 입력되어도 상관 없음

alter table 테이블명 change 칼럼명 unique;

ALTER TABLE Persons
CHANGE COLUMN name name VARCHAR(10) UNIQUE;

<문자열 함수>

1. 문자 수 반환
char_length(string) - 문자수
length(string)      - 바이트수

SELECT name, CHAR_LENGTH(name), LENGTH(name) FROM userTbl;

2.문자 연결
concat(expression1,,,2,,3,)
concat_ws(separator, expression1, ex,,,2)

mobile1 과 mobile2 를 연결
select concat(mobile1, mobile2) from userTbl;

select concat_ws('-',mobile1, mobile2) from userTbl;

3.문자열 대체
insert(string, position, number, substring)

string      기준문자열
position    시작위치(1부터)
number      길이
substring   대체할 문자열

이름 홍**
select insert(name, 2, 2, "*") from userTbl;

4. format(number, decimal_places):숫자, 소숫점자리수
구매액 자리수 표시하기

select format(price*amount, 1) from buyTbl;

5. 문자열 반환
left(string, number_of_chars), right(string, number_of_chars),
mid(string, start, length)

select left(name, 1) from userTbl;
select right(name, 2) from userTbl;
select mid(name,2,1) from userTbl;

mobile1, mobile2의 앞3, 뒤4
select mobile1, insert(left(mobile2,3),1,3,"***"), right(mobile2,4) from userTbl;

6. 대소문자 변환

lcase(),lower() 소문자
ucase(),upper() 대문자


<날짜와 시간 함수>

1. now(), current_timestamp(), sysdate()
YYYY-MM-DD time

2.curdate(), current_date()
YYYY-MM-DD

insert into userTbl values("ABC", "홍길동", 2002, "제주", 010, 1239999, 180,CURDATE());

3. adddate(date, interval value unit), subdate(date, interval value unit)
날짜를 기준으로 날짜를 더하거나 차감하여 반환

unit : day, month, year

select adddate(curdate(), interval 100 day);

4. 날짜나 시간을 특정한 형식에 따라 반환

year(date), month(date), day(date), hour(date), minute(date), second(date), microsecond(date)
date(expression) YYYY-MM-DD, time(expression) HH:MM:SS

5. datediff(date1, date2)
날짜 차이를 일수로 변환

select datediff('2025-02-06', curdate());

6. dayofweek(date)
요일을 숫자로 반환(1~7, 1-일)
일월화수목금토
select dayofweek(curdate());

dayofyear(date)
일년중에 몇일 지났는지 반환

last_day(date)
날의 마지막 날짜를 반환

<시스템 관련>
1.database()
2.version()
3.user()


## any/all , 서브쿼리

쿼리문안에 또 쿼리문있는것

지역이 전남인 사용자의 출생년도 이후에 태어난 사람의 정보를 조회

select birthYear from userTbl where addr='전남'

select * from userTbl
where birthYear>=(select birthYear from userTbl where addr='전남');

주소가 경남인 사람의 키보다 키가 크거나 같은사람의 정보를 조회

select * from userTbl
where height>=any(select height from userTbl where addr='경남')

any ==> 서브쿼리 결과가 여러개일때 or 조건에 해당

select * from userTbl
where height>=all(select height from userTbl where addr='경남')

all ==> 서브쿼리 결과가 여러개일때 and 조건에 해당


주소가 '경기'인 사용자의 사용자별 총 평균 금액보다 사용자별 총 합계금액이 큰 사용자의 아이디, 이름, 주소, 합계금액 출력

select avg(b.price*b.amount) from buyTbl as b
join userTbl on b.userID=userTbl.userID
where userTbl.addr='서울'
group by userTbl.userID


select u.userID , u.name, u.addr, sum(b.price*b.amount)
from userTbl as u
join buyTbl as b
on u.userID=b.userID
group by u.userID
having sum(b.price*b.amount)>=any(select avg(b.price*b.amount) from buyTbl as b
join userTbl as u on b.userID=u.userID
where u.addr='서울'
group by u.userID);


sum avg coont max min

가장 늦게 태어난 사람과 가장 빨리 태어난 사람

select * from userTbl
where birthYear=(select max(birthYear) from userTbl) or birthYear=(select min(birthYear) from userTbl);

상품별 가장 큰 주문횟수보다 큰 사용자별 주문횟수 사용자의 userID,주문횟수 조회

select prodName,count(1) from buyTbl group by prodName
 

select userID, count(userID) from buyTbl
group by userID
having count(userID)>=(select count(prodName) from buyTbl group by prodName
order by count(prodName) desc limit 0,1);






1. 기본 문장

SELECT column1,,,,
FROM table_name
WHERE condition;

userTbl에서 모든 데이터를 조회
SELECT * from userTbl

userTbl에서 userID, name, addr 조회
select userID, name, addr from userTbl

show columns from 테이블;

buyTbl에서 prodName, amount, price를 조회

userTbl에서 이름이 '은지원' 고객의 모든 정보를 조회
select * from userTbl where name='은지원';

userTbl에서 addr이 경기인 사용자의 userID, name, addr을 조회
select userID, name, addr from userTbl where addr='경기';

userTbl에서 지역은 '서울'이고 출생년도가 1970 이후에 태어난 고객의 이름,출생년도,지역을 조회

지역이 서울이거나 경기인 사용자의 userid addr 를 조회



## LIKE 연산자
특정 부분이 일치하는것

userTbl에서 이름이 '김'으로 시작하는 사용자의 userID name 조회
select userID , name from userTbl where name like '김%';

## BETWEEN 연산자
같은 컬럼의 조건식(and)을 할때 사용
출생연도가 1970~1980 사용자의 name birthYear
select name birthYear from userTbl where birthYear between 1970 and 1980;

##in 연산자
같은 컬럼의 조건식(or)을 할때 사용
select ~~~ from userTbl where addr in ("서울","경기");

## order by 컬럼명 asc(오름차순), desc(내림차순)

userTbl에서 모든 정보를 조회하고 순서를 name 오름차순으로 정렬
select * from userTbl order by name asc;

userTbl에서 모든 정보를 조회하고 순서를 addr 오름차순으로 정렬하고 두번째 이름 오름차순
select * from userTbl order by addr asc,name asc;


## distinct
중복된것은 하나만 남김
종류가 몇가지인지 알기 쉽게 할수있음
select distinct addr from userTbl order by addr asc;

## limit
출력하는 갯수를 정함
limit 시작행, 개수
select * from userTbl limit 0,5;

select * from userTbl order by mdate asc limit 0,5;

## group by
그룹으로 묶어주는 역할

sum 합계
avg 평균
count 횟수

사용별로 총 합계금액 조회
select userID, sum(price*amount) from buyTbl group by userID;

사용자별로 평균금액 조회
select userID, avg(price*amount) from buyTbl group by userID;

상품별로 총 합계금액 조회하고 총 합계금액 내림차순
select prodName, sum(price*amount) from buyTbl group by prodName order by sum(price*amount) desc;

상품별로 주문횟수 조회
select prodName, count(prodName) from buyTbl group by prodName order by count(prodName) desc;

userID BBK인 사용자의 총 합계금액 평균금액을 조회
select userID, sum(price*amount),avg(price*amount) from buyTbl where userID='BBK' group by userID;

## having
where와 비슷한 개념.
having group by절 다음에 나와야함

사용자별 합계금액이 1000원 이상인 사용자의 아이디, 합계금액 조회
select userID, sum(price*amount) from buyTbl group by userID having sum(price*amount) >= 1000;

select
from
where
group by
having
order by
limit


사용자별 평균금액이 200원 이상인 사용자아이디, 평균금액 조회하고 userID오름차순정렬
select userID, avg(price*amount) from buyTbl group by userID having avg(price*amount) >=200 order by userID asc;



char    : fixed    - 우편번호, 전화번호, 생년월일  자릿수가 정해저있는 값
varchar : variable - 이름, 아이디, 주소	     자릿수가 안정해져있는 값

text : 글 내용 긴것 65,535 characters
blob : Binary large OBjects 65,535bytes of data

longtext 최대 4G

tintint - 1byte
smallint - 2byte
int	- 4byte



##데이터 추가
insert into column values ('','','',,,,)
insert into column('','',,) values('','',,)

##데이터 갱신

update table_name
set column1 = value1, column2 = value2,,,
where 조건절

##데이터 삭제
delete from table_name
where condition;

delete from Persons where id='bbb';


##조인

두 개 이상의 테이블을 서로 묶어서 하나의 결과 집합 조회

1.inner join (내부조인)
일반적인 조인, 가장 많이 활용
두테이블에서 값이 일치하는 레코드를 반환

select table.column_name,,,
from table1 
(inner)join table2
on table.기본키 = table2.외래키;

select  칼럼
from    테이블
join    테이블
on      
where
group by
having	 
order by

주문내역이 있는 사용자의 모든 정보를 조회

select * from userTbl
inner join buyTbl
on userTbl.userID=buyTbl.userID

주문내역이 있는 사용자의 userID,name,addr,prodName을 출력

select userTbl.userID, userTbl.name, userTbl.addr, buyTbl.prodName
from userTbl
join buyTbl
on userTbl.userID = buyTbl.userID

#테이블명을 줄여서 별칭 사용

테이블명 as 별칭

userTbl as u
buyTbl as b

-- 사용자 kbs의 userID, name, addr, prodName

select u.userID, u.name, u.addr, b.prodName
from userTbl as u
join buyTbl as b
on u.userID=b.userID
where b.userID='KBS';

이름이 바비킴인 사용자의 아이디, 주소, 상품명 출력하고 상품명 오름차순 정렬

select u.name, u.addr, b.prodName
from userTbl as u
join buyTbl as b
on u.userID=b.userID
where u.name='바비킴'
order by b.prodName asc;

 주문내역이 있는 상품의 상품명, 제조사, 재고수량, 주문일 조회

select p.prodName, p.prodCom, p.prodStock, b.oDate
from prodTbl as p
join buyTbl as b
on p.prodName=b.prodName;

재고수량이 20개 이상인 상품의 상품명, 재고수량,주문일 조회하고 주문일 내림차순 정렬

select p.prodName, p.prodStock, b.oDate
from prodTbl as p
join buyTbl as b
on p.prodName=b.prodName
where p.prodStock>='20'
order by b.oDate desc;

주문내역이 있는 사용자의 사용자별 userID, name, 총 합계금액

select u.userID, u.name, sum(b.price*b.amount)
from userTbl as u
join buyTbl as b
on u.userID=b.userID
group by b.userID;

주문내역이 있는 상품의 상품별 상품명, 제조사, 평균금액을 출력하고 평균금액 내림차순정렬

select p.prodName, p.prodCom, avg(b.price*b.amount)
from prodTbl as p
join buyTbl as b
on p.prodName=b.prodName
group by p.prodName
order by avg(b.price*b.amount) desc;

상품별 상품명, 재고수량, 합계금액을 출력 합계금액이 200원 이상, 합계금액 내림차순 정렬

select p.prodName, p.prodStock, sum(b.price*b.amount)
from prodTbl as p
join buyTbl as b
on p.ProdName=b.prodName
group by p.prodName
having sum(b.price*b.amount)>=200
order by sum(b.price*b.amount) desc;

3개 테이블

userTbl.userID == buyTbl.userID
prodTbl.prodName == buyTbl.prodName

from table1
join table2
on ,,
join table3
on ,, 

주문내역이 있는 사용자의 모든 정보와 모든 상품정보

select * from userTbl as u
join buyTbl as b
on u.userID = b.userID
join prodTbl as p 
on p.prodName = b.prodName;

주문내역이 있는 사용자의 아이디, 이름, 상품명, 제조사

select u.userID, u.name, p.prodName, p.prodCom
from userTbl as u
join buyTbl as b
on u.userID = b.userID
join prodTbl as p 
on p.prodName = b.prodName;

책을 주문한 사용자의 이름, 주소,상품명, 재고수량 

select u.name, u.addr, p.prodName, p.prodStock
from userTbl as u
join buyTbl as b
on u.userID = b.userID
join prodTbl as p 
on p.prodName = b.prodName
where b.prodName='책';

주문날짜가 2021년6월에 주문한 사용자 이름, 상품명, 제조사를 출력하고 주문일 최신순으로 정렬

select u.name, b.prodName,b.oDate, p.prodCom
from userTbl as u
join buyTbl as b
on u.userID = b.userID
join prodTbl as p 
on p.prodName = b.prodName
where b.oDate like '2021-06%'
order by b.oDate desc;

일별 주문내역의 합계금액과 날짜 조회하고 날짜 오름차순정렬

select oDate ,sum(price*amount)
from buyTbl
group by oDate
order by oDate asc;


상품내역에서 사용자 아이디 이름 상품명 카테고리, 카테고리명

select u.userID, u.name, p.prodName, g.prodGroup, g.groupName
from userTbl as u
join buyTbl as b
on u.userID = b.userID
join prodTbl as p
on p.prodName=b.prodName
join groupTbl as g
on g.prodGroup=p.prodGroup;


## 뷰

select 결과를 또 다른 테이블 형태로 생성
보안 문제, 복잡한 쿼리의 중복 배제

create view view_name as
select 칼럼1,,,
from 테이블명
where condition

create view v_userTbl
as
seplect userID, name, addr from userTbl;

CREATE VIEW v_userbuyTbl
AS
SELECT u.userID, u.name, u.addr, b.prodName
FROM userTbl u
INNER JOIN buyTbl b
ON u.userID = b.userID;



###다른 조인

select column_name(s)
from table1
left join table2
on table1,,,,= table2,,,

구매내역이 없는 회원을 포함한 정보조회


select * from userTbl
left join buyTbl
on userTbl.userID=buyTbl.userID

select u.userID, u.name, b.prodName
from userTbl as u
left join buyTbl as b
on u.userID=b.userID;


주문내역이 없는 사용자만 조회

select u.userID, u.name, b.prodName
from userTbl as u
left join buyTbl as b
on u.userID=b.userID
where prodName is NULL;


select p.prodName, b.userID, p.prodCom
from prodTbl as p
left join buyTbl as b
on p.prodName=b.prodName
where userID is null




DML - select , insert , update , delete
DML 구문이 사용되는 대상은 테이블의 행

DDL - show, create , alter(change) , drop
데이터를 조작(조회, 삽입, 수정, 삭제)하는데 사용되는 언어

drop talbe if exists persons - 해당 테이블명이 이미 있다면 덮어쓴다.

테이블 수정 alter 

alter table 테이블명 add 칼럼명 자료형 ,,,, (맨앞 first , 지정컬럼뒤 aftrt 앞컬럼명)
alter table 테이블명 drop 칼럼명

alter table 테이블명 change 칼럼명 new컬럼명 자료형,,,,

테이블 삭제 drop

drop table 테이블명 ==> 테이블자체삭제 구조도 삭제(DDL)
truncate table 테이블명 ==> DB개체 명령어, rollback 안됨(DDL)==> 완전 비우기
delete from 테이블명==> 데이터 조작 명령어(DML)


mysql은 자동커밋, 쿼리문 실행 시 바로 적용
오라클은 쿼리문실행시 메모리상에 있다가 커밋하면 적용을 진행해서 저장장치에 저장


<변수의 사용>

set @변수명 =  값==> 선언 및 대입

select @aaa ==> 호출

<제어구문>
1) if(조건식, true값 false값)
set @aaa = 100;
select if(@aaa>100, "큰값", "작은값") as value
select userID,name, if(birthYear >=1980, "MZ세대", "X세대") as 세대 from userTbl;

buyTbl에서 총 합계금액이 1000원 이상인 사람은 "vip고객" 나머지는 "일반고객"
select userID,sum(price*amount), if(sum(price*amount) >=1000, "vip고객", "일반고객") as 고객등급 from buyTbl group by userID;


2)case when else end

case
	when 조건식 then 수행할 문장
	when 조건식 then 수행할 문장
	when 조건식 then 수행할 문장
	else
end

userTbl에서 지역이 서울 - 1000원
		경기 - 2000원
		그외 나머지 - 3000 as 배송비

select name, addr,
case
	when addr='서울' then 1000
	when addr='경기' then 2000
	else 3000
end as 배송비
from userTbl;

name, mDate, 요일
select name, mDate,
case
	when dayofweek(mDate)=1 then "일요일"
	when dayofweek(mDate)=2 then "화요일"
	when dayofweek(mDate)=3 then "화요일"
	when dayofweek(mDate)=4 then "수요일"
	when dayofweek(mDate)=5 then "목요일"
	when dayofweek(mDate)=6 then "금요일"
	else "토요일"
end as 요일
from userTbl;
	
buyTbl에서 총 합계금액이 1000원 이상인 사람은 "vip고객" 100원 이상인 사람 "베스트고객" 나머지는 "일반고객"

select u.name, sum(b.price*b.amount),
case
	when sum(b.price*b.amount)>=1000 then "vip고객"
	when sum(b.price*b.amount)>=100 then "베스트고객"
	else "일반고객"
end as 고객등급
from buyTbl as b
join userTbl as u
on u.userID=b.userID
group by b.userID


