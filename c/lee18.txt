-클라이언트의 요구사항 수집 및 분석 - 산출물(문서, s/w, h/w , 소스코드)

-설계(기능 명세서, UML, 스토리보드, 와이어프레임)

-프로그램 구현(기능-업무 별 개발자)

-테스트

-인수 인계

##임베디드 시스템의 특성
1.실시간성 - 최악의 상황에서도 정해진 시간 내에 동작되어야함
2.경량성 - 제한적 하드웨어 자원을 효율적으로 관리해야 함
3.저전력 - 운용 환경 고려 시 전력 소모를 최소화해야 함
4.보안성 - 운용할 기기에 맞게 신뢰할 수 있도록 보안 허점을 제거
5.QoS - Quality of Service, 사용자 요구 수준의 서비스 제공


##임베디드 S/W의 주요 기술 분야
1.임베디드 애플리케이션 - 멀티미디어 재생기 , GPS , ,,,
2.임베디드 미들웨어 - JVM(자바버츄얼머신)과  같은 자바 미들웨어 , 제어 미들웨어 , 통신 미들웨어
3.임베디드 시스템 S/W - 임베디드 OS, 장치 드라이버, 임베디드DBMS
4.임베디드 시스템 개발 도구 - 설계 도구, 검증 도구, 원격모니터, 툴킷
5.임베디드 S/W 플랫폼 - MS 닷넷 컴팩트 프레임워크, Android, iOS , 타이젠


##임베디드 운영 체제

1. 상용 RTOS (실시간, 선점형 멀티태스킹)

2. windows CE( 일반적인 운영 체제, 기본적으론 무거운 운영체제)

3. 임베디드 리눅스(라즈비안, 오픈소스라 라이선스 비용 절감됨)
- GPL
- 아파치 라이선스 Tmacat - WAS(web Application server)


#아이피(단말기에 부여한 고유 번호)/ 포트번호
아이피는 단말기, 포트번호는 프로그램
ipv4 : 8비트씩 4자리로 구성됨
ipv6 : fe80::c3d:d599:a88:d8a3 16(0~9+ABCDEF)진수 6자리 미래에 쓸 주소 거의 무한대
192.168.1.77
앞 3자리 네트워크주소 뒷자리 호스트주소
서브넷마스크 255.255.255.0 - 같은 네트워크인지 확인하는 용도, 호스트 주소의 갯수 255.255.255.252 -> 4개
	11000000.10101000.00000001.10011010
	11111111.11111111.11111111.00000000
AND     11000000.10101000.00000001.00000000
	192.168.1.0

	11000000.10101000.00000001.00000001
	11111111.11111111.11111111.00000000
AND     11000000.10101000.00000001.00000000
	192.168.1.0

broadcast 192.168.1.255 - 같은 네트워크에 전송을 할때 쓰는 주소


#서비스하려면 필요한것 
-화면구현
-도메인주소
-서버 컴퓨터 - 고정ip
-DNS서버프로그램 - 도메인과 ip를 연결하는 프로그램
-웹서버프로그램 - 개발한 프로그램을 사용자가 브라우저에서 확인 할 수 있도록 하는 프로그램 - 아파치웹서버, WAS
-ssh, ftp
-프로그램언어(자바-jsp,파이썬,ASP)
-DBMS(데이터베이스관리시스템)

#외부서버를 빌리는것
-호스팅 
-클라우드(AWS)

##교차 개발 환경 - 툴체인
1.교차 개발 환경의 개요 - 호스트시스템(ex컴퓨터) , 타겟시스템(ex라즈베리파이)
- Serial   - 타깃 시스템의 동작을 모니터링하는 용도로 사용
- Ethernet - 타깃 시스템과 호스트시스템 사이의 고속 데이터 전송
- JTAG	   - 타깃 시스템에 대한 디버깅 용도로 사용
- USB	   - 이미지 업데이트를 위해 사용

2.타깃 보드 (라즈베리파이)
- 인터럽트  - 디바이스가 수행하는 일을 잠시 중단시키고 다른 일을 수행하도록 알려주는 것을 인터럽트라 한다
- GPIO    - 일반적인 목적을 가진 IO포트
- 통신포트  - 통신을 위한 포트

객체 지향

구조적 언어

고급 언어 : 사람이 이해하기 쉬움

저급 언어 : 기계어에 가까운 컴퓨터가 이해하기 쉬운 언어



##소스코드 버전 관리  체계의 유형

1.git : 리눅스 개발용 소스 코드 관리 프로그램

중앙 집중형 : 중앙 저장소 - 작업 파일,변경 내역 히스토리 저장

분산형 : 중앙 저장소 - 작업 파일,변경 내역 히스토리 저장 + 개별로 중앙 저장소 - 작업 파일,변경 내역 히스토리 저장


##임베디드 시스템 테스트
단위(개발자) - 통합 - 시스템(성능) - 인수 테스트


1.단위 테스트 : 개발자가 일반적으로 테스트를 함 - 코드 커버리지 : 테스트 한 비율
 (1)정적 테스트 : 소프트웨어 실행 없이 소스코드를 테스트 - 표준 준수 여부를 체크
  (가) 리뷰
    -개발자가 직접 소스코드,요구사항, 개발산출물을 보면서 소스코드의 품질을 체크
    -리뷰 종류는 동료 기술 검토, 워크스루, 코드 인스펙션

  (나) 졍적 분석
    - 자동화 툴 기반의 소스코드 분석 기법이며 소스코드의 복잡도, 데드코드 코딩 룰 에러, 소스코드 구조 및 의존 관계 분석 및 검출
    - 툴 기반의 분석 방식이므로 기준이 명확해야한다

 
 (2)동적 테스트 : 소프트웨어 실행 하여 잘 수행되는지 테스트 - 개발 명세서를 기반으로 잘 실행되는지 체크
  (가) 블랙박스 테스트
     -명세 기반. 소스코드 실행만으로 테스트

  (나)화이트박스 테스트
    - 구조 기반. 소스코드 실행하여 모듈 내 의 동작이 어떻게 되는지 테스트

2.통합 테스트 : 하드 웨어랑 소프트웨어 합쳐서 테스트
  (가) 상향식 통합방식
    - 아래서부터 테스트. 수정 비용이 적게 들지만 시간 소요가 많이 듬

  (나) 하향식 통합방식
    - 실행해서 오류 발생시 위에서부터 하나씩 테스트. 주요 기능에 대한 초기 테스트가능하지만 범위가 명확해야하고
      요구사항이 바뀔때마다 하위 모듈에 영향이 가서 테스트 재수행을 빈번하게 수행 후반부에는 고려 사항이 많아짐
  (다) 빅뱅식 통합 방식
    – 모듈 간 결함도가 높고 단계적 통합이 어려운 경우와 기존의 안정된 시스템에
      새로운 모듈을 추가할 경우 모듈 간의 인터페이스를 고려하지 않은 상태에서 결합시켜 테스트하는 방식. 
      소규모나 단순한 프로그램에 효과가 있으나 규모가 큰 시스템에서는 결함 원인 찾는데 어려움이 있다.
      또 테스트에 필요한 모든 모듈이 준비되어야 가능한 통합 방식
3.시스템 테스트
  (1)품질 특성 기반의 테스트
   (가)사용성
     -명세된 조건하에서 사용자가 이해하고 배우기 쉽고 용이하게 사용하는지
   (나)유지 보수성
     -환경이나 요구 사항의 변화에 맞춰 시스템 수정 및 개선 능력을 말함
   (다)신뢰성
     -사용자가 사용하면서 특별한 상황에서 일정 이상의 성능을 유지하는 능력 품질 특성
   (라)효율성
     -가성비
   (마)이식성
     -다른 환경에서도 변환하여 적응하는 능력
   (바)보안성
     -인증된 사용자만 접근할수있게 하는 시스템 능력

# 멀티 V 모델 구조

 - 모델(개발 컴퓨터) - 

 - 프로토타입 - 기본 기능

 - 시제품


##임베디드 시스템 버그 수정
 1.테스트 관리 및 결함
  -결함 유형 분류
   • 기능 결함 : 소프트웨어 프로그램 또는 시스템의 동작 결함
   • 성능 결함 : 하드웨어 자원 또는 반응 시간과 관련된 결함
   • 데이터 결함 : 연산 처리 결과의 출력 값에 대한 결함
   • 요구 사항 결함 : 불명확한 요구 사항 또는 모순으로 발생한 결함
   • 인터페이스 결함 : 기능 간 또는 시스템 간 연동과 관련된 결함
   • UI 결함 : User Interface 검증 처리와 관련된 결함

 2.결함 심각도 분류
  일반적으로 조직의 품질(테스트) 정책에 따라 정의하고 사용됨
    • 치명적(critical) 결함 : 시스템(소프트웨어/하드웨어) 운영이 중단된 결함.
      데이터가 훼손 및 손실된 결함
    • 주요(major) 결함 : 기능 중 핵심 기능이 작동하지 않거나 정확히 동작하지 않아
      더 이상 작업 수행이 불가능한 결함. 요구 사항 성능에 부합되지 않은 결함.
      필수적인 예외 상황 처리가 누락된 결함
    • 사소한(minor) 결함 : 다른 대안이 있는 미미한 수준의 결함. 기능 수행은 대부분
      가능하나 사용자의 불편함을 유발하거나 거슬리는 결함


 3.결함 제거를 위한 회귀적 테스팅(regression test)접근 방법
   • 일반적으로 테스트 작업은 소프트웨어 개발 프로세스에서 한 번 수행되고 마는 작업이 아님
   • 테스트 수행 중 또는 유지 보수 과정에서도 소프트웨어에 문제가 발생할 수 있는데,
     개발 라이프 사이클 전체에서 시스템과 소프트웨어가 정상적으로 변경되었는지 확인,
     변경 과정에서 의도치 않게 유입되는 이러한 결함 또는 오류를 발견하고 제거,
     개선하기 위해 코드의 일부를 수정하는 작업이 진행됨. 이 과정을 디버깅 작업이라 함
   • 디버깅 작업으로 인해 유입 가능한 새로운 오류를 검출하기 위해 회귀 테스트라는
     작업으로 반복적인 시험을 진행하게 되는데 회귀 테스트의 경우는 시간을 절약하는 것이 필수
   • 회귀시험과 같이 반복적인 작업은 반드시 자동화가 되어 바로 리포트를 확인할 수 있도록 되어야 함

 4.디버깅(debugging) 기법의 이해
   • 행위(behaviour) 기반의 디버깅 방법
     (가) 메모리덤프 디버깅
        – 문제의 원인을 메모리 정보에서 일일이 분석하여 찾는 방법
     (나) 출력물 삽입에 의한 디버깅
        – 프로그램의 이곳 저곳에 임의 출력 코드를 삽입하여 수행시켜 문제의 원인을 찾는 방법
     (다) 자동화 도구를 이용한 디버깅
        – 수행 과정을 추적해 놓고 특정 명령문이 수행될 때 수행을 중단시켜 문제의 원인을 찾는 방법
   • 관점(view) 기반의 디버깅
     (가) 귀납적 관점에 따른 디버깅 - 사례를 통해
        – 주변의 관련된 정보를 수집하여 문제의 원인들을 하나씩 따지면서 결함을 해결해 나가는 방법
     (나) 연역접 관점에 따른 디버깅 - 가설 생성
        – 어떤 가정하에 문제를 발생시켰을 법한 모든 원인들을 나열한 후 하나씩 그
          가능성을 따져가며 불가능한 원인들을 제거시키고 나머지 원인들에 대해서
          가정을 수집한 다음 결함을 해결해 나가는 방법
     (다) 역행 조사에 따른 디버깅
        – 결함 발견 지점으로부터 발생시킨 지점을 찾기 위해 원시 소스코드를 거슬러
          올라가면서 결함을 찾아 가는 방법


##임베디드 시스템 변경 관리 수행

#MSA(micro service architecture)
독립적인 소규모 프로그램 - 메신저 메일 검색 ,,,,
애자일 방식

1. 형상 관리(configuration management) 이해
  (1) 개념
     • 개발 프로세스상의 시스템 및 소프트웨어 라이프 사이클 기간 동안 개발되는 모든
       제품의 무결성을 유지하는 것으로 그 대상은 소스코드, 문서, 인터페이스 등 각종
       결과물에 대해 형상 항목을 만들고 이들 형상에 대한 변경을 체계적으로 관리,
       제어하기 위한 활동
  (2) 의의
     • 프로젝트 팀에서 만들어지는 시스템 제품의 오류 또는 실수를 최소화함으로써 생산성을 높이는 것
  (3) 범위
     • 형상 관리는 일반적으로 버전 관리, 변경 관리, 소스 관리, 빌드 관리, 이슈 관리 등을 모두 포함
2. 형상 관리(configuration management) 프로세스 이해
  (1) 형상 식별(configuration identification)
     형상 관리의 대상을 식별하고 베이스라인의 기준을 정하는 활동
     • 세부 활동
       (가) 형상 항목 선정
          – 개발 프로세스에서 생산되거나 사용되는 작업 산출물 또는 작업 산출물을
            구분하고 이중에 변경에 대한 통제가 필요한 산출물을 선정하는 활동
       (나) 베이스라인 기준 선정
          – 시스템 소프트웨어 개발의 특정 시점에서 형상 항목이 하나의 완전한 산출물로
            공식적으로 검토, 승인된 후에 개발의 기준으로 활용되고 공식적인 변경 관리
            절차를 통해서만 변경 관리될 수 있는 명세서나 제품
  (2) 형상 통제(configuration control)
     시스템 및 소프트웨어의 형상 변경 제안을 검토하고 승인하여 기준선(baseline)에
     반영될 수 있도록 통제하는 활동세부 활동 
  (3) 형상 감사(configuration audit)
     형상 항목의 변경이 제대로 이루어졌는지 검토, 승인하고 개발자와 유지
     보수자들만의 검열이 아닌 객관적인 검증, 확인 과정을 거침으로써 새로운 형상의
     무결성을 확보하는 활동

3. 시스템, 소프트웨어 형상 관리(configuration management)의 필요성
  (1) 이전 리비전이나 버전에 대한 정보에 언제든지 접근할 수 있어야 함   - 백업이 쉽게 하기 위해
  (2) 동일한 프로젝트에 대해서 여러 개발자가 동시에 개발할 수 있어야 함 - 전체적으로 관리를 하기 용기하게 하기 위해
  (3) 개발 소스의 접근을 제한하여 관리할 수 있어야 함		  - 중요 파일의 접근 권한을 제한. 사고 방지를 위해
  (4) 에러가 발생했을 때 빠른 시간 내에 수정할 수 있어야 함          - 관리가 잘 될수록 수정하기 용이
  (5) 사용자의 요구에 따라 적시에 최상의 시스템을 공급할 수 있어야 함
4. 형상 관리(configuration management) 자동화 도구의 필요성
   시스템 및 소프트웨어의 형상을 수작업으로 관리하려면 많은 시간과 노력이 필요함
   데이터의 일관성(사용자의 요구사항)을 유지하고 프로젝트의 원활한 업무 수행과 생산성을 높이기
   위해서는 자동화된 도구를 사용하는 것이 효율적임



