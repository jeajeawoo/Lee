애플리케이션 테스트 수행하기

1. 테스트의 개요
테스트 과정에 필요한 역할은 소프트웨어 아키텍트와 테스트 매니저이다.
생명 주기의 V 모델 
요구사항, 분석, 디자인, 구현 | 단위테스트, 통합 테스트, 시스템 테스트, 인수 테스트
   1) 프로젝트 수행 단계에 따른 테스트의 분류
	(1) 단위 테스트
		작은 소프트웨어 단위(컴포넌트 또는 모듈)를 테스트하는 것으로서, 일반적으로
		개발자 자신에 의해 행해진다. 개발 도구의 발전으로 개발 과정 중에 자동으로 진행
	(2) 통합 테스트
		모듈 사이의 인터페이스, 통합된 컴포넌트 간의 상호 작용을 테스트 하는 것으로
		하나의 프로세스가 완성된 경우 부분적으로 통합테스트를 수행하는 경우도 있다.
	(3) 시스템 테스트
		통합된 단위 시스템의 기능이 시스템에서 정상적으로 수행되는지를 테스트하는
		것으로 성능 및 장애 테스트가 여기에 포함된다.
	(4)인수 테스트
		일반적으로 최종 사용자와 업무에 따른 이해관계자 등이 테스트를 수행함으로써
		개발된 제품에 대해 운영 여부를 결정하는 테스트로 실제 업무 적용 전에 수행한다

2. 프로젝트 수행 단계에 따른 테스트의 접근 방법
   1) 단위테스트
	(1) 특징
		구조적 테스트, 기능성 테스트, 리소스 관련 테스트, 강건성 테스트 등 특정 비기
		능성 테스트 등이 포함되어 수행되며, 컴포넌트 명세, 소프트웨어 상세설계, 데이터
		모델 명세 등을 이용하여 테스트한다.
	(2) 방법과 목적
		단위 테스트는 구조 기반과 명세 기반 테스트로 나누어지며, 기본적으로 개발된
		코드 및 모듈의 범위 내에서 정상적인 작동과 사용자의 요구사항 등을 테스트하는 목적
		(가) 구조기반은 업무 단위별 제어 흐름과 조건 결정에 따른 결과를 테스트
		(나) 명세기반은 동등 분할과 경계 값 분석을 위하여 사용자의 입력, 출력, 내부 이벤트 확인
   2)통합테스트
	(1)특징
		일반적으로 빅뱅 방식보다는 순차적 형태와 아키텍처에 대한 이해를 바탕으로 진행한다
	(2)종류
		빅뱅,상향,하향,샌드위치,Central,Collaboration,레이어 통합 등의 테스트
   3)시스템테스트
	(1)특징
		시스템 테스트는 개발 프로젝트 차원에서 정의된 전체 시스템의 동작과 관련되어
		있다. 환경 제한적 장애 관련 리스크를 최소화하기 위하여 실제의 최종 사용자
		환경과 유사하게 시스템 성능, 관련된 고객의 기능, 비기능적인 요구사항 등이 완
		벽하게 수행되는지를 테스트하며, 이때 요구사항 명세서, 비즈니스 절차, 유스케이스
		리스크 분석 결과 등을 이용한다
	(2)테스트 방법
		업무 기반의 기능적 요구사항과 시스템적인 비기능적 요구사항으로 나누어진다.
		(가)기능적 요구사항은 요구사항 명세서, 비즈니스 절차, 유스케이스 등 명세서 기반의 블랙박스 테스트
		(나)비기능적 요구사항은 성능테스트 회복테스트, 보안테스트, 내부 시스템의 메뉴구조
			웹 페이지의 네비게이션 등의 구조적 요소에 대한 화이트박스 테스트
   4)인수테스트
	사용자 인수 : 적절성
	운영상의 인수 : 관리자가 인수시 수행하는 테스트 백업/복원 시스템, 재난 복구, 사용자 관리 정기점검 등
	계약 인수 : 계약상의 조건을 준수
	규정 인수 : 정부 지침 법규 규정 등
	알파 	      :조직 내 잠재 고객
	베타	      :실제 고객

3. 테스트 기반 종류
 구조기반
 명세기반
 경험기반

4. 자동화 도구
	자동화 도구를 적절히 사용하자.

테스트 하려면
목적과 범위를 확인을 하고 계획안을 확인해서 시작 기준과 종료 기준을 확인
대충 어떤 오류가 날지 예상하고 자주 나는 오류 케이스를 기록하고 테스트한다.
테스트 하는 환경을 실제와 비슷한 환경으로 구성, 테스트 도구도 잘 쓰자.
기능 단위로 테스트를 하고 혼자서 단위 테스트를 진행해본다 그러고 나서 통합 테스트를
진행해서 실행 결과를 기록하고 종료할지 평가한다.
성능 테스트는 시스템의 성능이 요구사항을 만족하는지 테스트
수행하고 보고서 작성
Ramp up은 점진적인 사용자 증가
Duration은 목표사용자 바로 투입

테스트 도중 결함이 발견되면
결함관리 계획을 세우는데 기록 검토 수정 재확인이 필요
결함상태를 추적하려면 결함 발견하고 검토해서 결함이 아니면 종료
결함이면 수정을 한다.
조치 보류 Deferred

결함 분류는 시스템 결함 기능결함 GUI결함 문서결함이 있는데
시스템은 어플과 DB처리에서 발생한다
지연이나 강제종료 등의 에러
기능 결함은 요구사항이 안 맞는 경우나 다른 것과 연동이 안될때
GUI 결함은 사용자 화면에서 이상한 구현 Tap키로 다음 칸이 다른곳일때
문서 결함은 메뉴얼 불일치 즉 불완전한 상태의 문서
결함 심각도는 높음 중간 낮음

결함조치 기법은
단위테스트로는 junit , mock 활용
통합 테스트는 어떤부분에 어떻게 접근해서 테스트 할지 회의
시스템 테스트는 성능 부하가 일어난걸 찾아서 교체를 하거나 장애 복구를 하고 보안을 신경쓴다.
인수테스트는 요구 사항이 잘 적용되는지 확인 만족하십니까

결함 관련 용어는
에러,오류,실패,결함
5개의 규칙 중 하나 이상 해당하면 다 결함
느려도 결함. 사용하기 까다로워도 결함.

결함조치를 잘 하려면 적절한 테스트 양과 결함수
그렇지만 다 해결은 불가능에 가깝다.

그래서 우선순위를 정해서
시스템이 다운 될만한 심각도 높은것부터해서 낮은것으로 결함 조치를 하는데
개선 방안 범위를 지정, 개선 조건을 설정한다.
결함 유형별로 이정도면 결함이 아니다 수준을 정해서 개선을 한다
업무 가중치별로 순위를 정하는데 1점~5점에서 3점이하는 낮고 4점이상은 높다.
심각도 높고 가중치도 높으면 그것부터 조치하자.

조치 관리로는 인스펙션과 워크스루가 있는데
인스펙션은 날 잡아서 회의하기
워크스루는 코드 잘 짜는 사람에게 코드 물어보기
그래서 인스펙션은 하려면 준비기간이 필요하고
워크스루는 상사에게 물어보자.
아무튼 인스펙션은 목적이 결함 제거이고
거의 다 완성된 상태이고 결과를 기록한다.

형상관리는 계획, 요구분석, 설계, 구현, 시스템통합, 설치운영 단계에서
기준선에 맞게 관리하는것으로
형상 식별, 버전 관리, 변경 통제, 형상 감사, 상태 보고는
관리 대상을 구분하고 관리 목록 번호를 부여
진화 그래프를 통해 sci버전 부여/갱신
sci에 대한 접근 및 동기화 제어
sci 무결성을 평가하여 공식적으로 승인
개발자와 유지보수자에게 변경 사항을 공지하는 활동


테스트를 진행해서 결함을 발견하면 중요도가 높은 결함인지 낮은 결함인지 확인해서
조치를 진행하고나서 형상관리 시스템으로 관리자나 유지보수자에게 알린다.




