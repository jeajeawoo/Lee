1. 배포 언어

컴파일 언어(c,c++)
전처리기 -> 파싱 -> 번역 -> 어셈블리 -> 링킹 -> 로드
실행파일로 실행해서 속도가 빠르다. 수정이 번거롭다.

byte 코드 언어(java,c#)
class 라는 바이트 코드. 가상 실행환경인 JRE에서 한 줄씩 실행.
컴파일러 -> JRE(BCV, CL, JITC) -> os

인터프리터 언어(javascript, Python 등)
한 줄씩 번역되어 실행,
실행 속도는 느리나 메모리가 적게 소모, 컴파일이 빨라 수정이 수월

2. 배포환경

웹서버 (아파치웹서버)
정적인 리소스  (이미지,html)

웹어플리케이션서버 ( 톰캣)
동적인 리소스 (jsp,servlet 등)

3. 배포 단위
jar : java 라이브러리, 리소스, property 파일

war : servlet, jar 파일 web.xml 파일

ear : jar 와 war를 묶음

4. 형상관리 시스템
범위 : 전부
용어 : 형상관리, 형상항목, 기준선, 마이그레이션(관련소스파일을 저장공간으로 이관),리포지터리(이력관리 저장 공간)
	워크플로(정해진 순서), 반출(전송받기, 잠금상태),반입(전송하기, 버전관리 자동)

프로젝트의 배포관리 요건을 분석하고 배포환경 구성 방안을 계획.
기술적인 특성을 확인하고 배포 방식을 정의하는데
개발 언어를 확인하고 개발도구, 개발환경을 확인 애플리케이션의 유형을 확인
배포 대상 리소스의 유형을 확인 배포 시 연계하여 처리하고자 하는 프로젝트 요건을 확인.
개발하려는 어플의 인프라 환경을 확인하고 대상 서버를 확인
서버 구성 환경을 확인, 리소스 유형별 대상 서버를 확인
분산 배포 대상을 확인, 통합빌드배포 구성도를 작성
배포를 위한 도구와 시스템을 선정하고 설치하는데 적합한 도구를 선정
소스 형상관리 도구를 선정하고 빌드도구를 선정 빌드스케줄 관리도구를 선정
테스트 도구도 선정 코드 인스펙션 점검도구를 파악하고 선정
도구를 정의하고나서 서버단 클라단에 설치
배포 절차나 역할을 정의하는데 개발자가 할일을 개발자가 PL,PM이 할일은 PL,PM이
개발자는 잘 돌아가는지 관리자는 알맞게 했는지


애플리케이션 소스 검증

1. 소스코드 검증도구

정적 테스트 도구 : 코드 인스펙션, 테스트 전에 코딩 오류, 성능 저하, 보안 취약점 등의 결함 조기 발견.
 
동적 테스트 도구 : 프로그램 실행을 해서 테스트 해보는것.

2. 코드 인스펙션

룰 유형 : 성능 개선 , 코드 작성 규칙 , 에러 발생 가능성
룰 심각도 구분은 심각하면 심각한거고 아님 아닌거고

정규표현식 문자열 표현식의 정규식

테스트 프레임워크 (제이유닛 생각하면 된다)

코드 인스펙션 점검 룰 정의 하고 개발표준 바탕으로 추가보완할게 있는지 살펴본다
확인하고 일 나누고 변경대상이 되는 소스를 형상관리 서버로부터 반출하는데 승인받고 한다
코드 인스펙션 결과에서 위반 내역이 있는지 확인하고 보고하고 테스트 프레임워크를 돌린다.

애플리케이션 빌드

지속적인 통합 (컨티뉴신티그레이션) 환경
빌드 도구: Maven , gradlw
테스트 도구: junit
소스코드 품질 측정도구(코드 인스펙션)
테스트 커버리지 측정도구 : clover
빌드 스케줄 관리도구: Anthill

테스트 커버리지의 의미

라인커버리지  :  각 라인이 잘 수행됐는지
분기커버리지  :  if문이라면 각각 조건을 수행됐는지
조건커버리지  :  조건을 모두 수행됐는지

빌드 스케줄 관리도구

스케줄링 : 작업주기,작업시간 설정
상태 및 이력관리 : 진행 상태 , 오류 유형 구분
연계 관리 : 다른 빌드 스크립트와 형상관리 도구를 연계설정
리포팅 : 수행 결과 보고하기

애플리케이션 배포

운영환경의 특징

네트워크의 관점 : 기업 인트라넷, 방화벽 허용

계정 관리 부문 : 아이디 비밀번호 하드코딩 주의

보안 취약점 점검
